"""
InvenioRDM settings for GMAP project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from flask_babelex import lazy_gettext as _

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY="CHANGE_ME"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
#APP_ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']
APP_ALLOWED_HOSTS = ['10.72.254.252', 'localhost', '127.0.0.1']
#APP_ALLOWED_HOSTS = []


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://gmap:gmap@localhost/gmap"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': False,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': False,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://flask-babel.tkte.ch/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
    # ('tr', _('Turkish')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = "GMAP"
# Header logo
THEME_LOGO = 'images/invenio-rdm.svg'


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://127.0.0.1"

SITE_API_URL = "https://127.0.0.1/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "GMAP",
}

# Invenio-RDM-Records
# ===================
# See https://github.com/inveniosoftware/invenio-rdm-records/blob/master/invenio_rdm_records/config.py
RDM_RECORDS_DOI_DATACITE_ENABLED = False
RDM_RECORDS_DOI_DATACITE_USERNAME = ""
RDM_RECORDS_DOI_DATACITE_PASSWORD = ""
RDM_RECORDS_DOI_DATACITE_PREFIX = ""
RDM_RECORDS_DOI_DATACITE_TEST_MODE = True

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = False  # enable local login
SECURITY_REGISTERABLE = False  # local login: allow users to register
SECURITY_RECOVERABLE = False  # local login: allow users to reset the password
SECURITY_CHANGEABLE = False  # local login: allow users to change psw
SECURITY_CONFIRMABLE = False  # require users to confirm e-mail address

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = True  # allow users to change profile info (name, email, etc...)

# configure external login providers
import os

from invenio_oauthclient.contrib.settings import OAuthSettingsHelper

class GitlabOAuthSettingsHelper(OAuthSettingsHelper):
    def __init__(self,
        title=None,
        description=None,
        app_key=None,
        icon=None,
        access_token_method="POST",
        request_token_params=None,
        request_token_url=None,
        precedence_mask=None,
        server_url='https://gitlab.com'
        ):

        kwargs = dict(
            access_token_method ="POST",
            request_token_url = request_token_url,
            access_token_url = f"{server_url}/oauth/token",
            authorize_url = f"{server_url}/oauth/authorize",
            base_url = f"{server_url}/api/v4",
            app_key = (
                app_key or "GITLAB_APP_CREDENTIALS"
            ),
            request_token_params = (
                request_token_params or {'scope': 'read_user email'}
            ),
            precedence_mask = (
                precedence_mask or {'email': True}
            ),
            title = title or "Gitlab",
            icon = icon or "fa fa-gitlab",
            description = (
                description or "Gitlab/OAuth server instance"
            ),
        )
        super().__init__(**kwargs)

    def get_handlers(self):
        return dict(
            authorized_handler='invenio_oauthclient.handlers:authorized_signup_handler',
            disconnect_handler=gitlab_disconnect_handler,
            signup_handler=dict(
                info=gitlab_account_info,
                setup=gitlab_account_setup,
                view='invenio_oauthclient.handlers:signup_handler',
            )
        )

    def get_rest_handlers(self):
        return dict(
            authorized_handler='invenio_oauthclient.handlers.rest:authorized_signup_handler',
            disconnect_handler=gitlab_disconnect_handler,
            signup_handler=dict(
                info=gitlab_account_info,
                setup=gitlab_account_setup,
                view='invenio_oauthclient.handlers.rest:signup_handler',
            ),
            response_handler='invenio_oauthclient.handlers.rest:default_remote_response_handler',
            authorized_redirect_url='/',
            disconnect_redirect_url='/',
            signup_redirect_url='/',
            error_redirect_url='/'
        )

from invenio_oauthclient.handlers.utils import \
    require_more_than_one_external_account

from invenio_db import db
from invenio_oauthclient.handlers import authorized_signup_handler, \
    oauth_error_handler
from invenio_oauthclient.models import RemoteAccount
from invenio_oauthclient.utils import oauth_link_external_id, \
    oauth_unlink_external_id
from flask import current_app, redirect, url_for
from flask_login import current_user

def _request_user_info(remote, resp):
    # We could here, like in contrib.github, use an auxiliary library (eg, python-gitlab)
    # I've chosen not to use to not add a dependency for such small use.
    # The equivalent in python-gitlab for the request below is:
    # ```
    # > import gitlab
    # > gl = gitlab.Gitlab('https://gitlab.com', oauth_token=resp['access_token'])
    # > gl.auth()
    # > user_info = gl.user.attributes
    # ```
    import requests
    headers={'Authorization': f'{resp["token_type"]} {resp["access_token"]}'}
    r = requests.get(remote.base_url + '/user', headers=headers)
    if r.status_code != 200:
        return None
    return r.json()
    
def gitlab_account_info(remote, resp):
    user_info = _request_user_info(remote, resp)
    _id = user_info['id']
    _email = user_info['email']
    _username = user_info['username']
    _full_name = user_info['name']
    return dict(
        user = dict(
            email = _email,
            profile = dict(
                username = _username,
                full_name = _full_name
            ),
        ),
        external_id = str(_id),
        external_method = 'gitlab'
    )

def gitlab_account_setup(remote, token, resp):
    user_info = _request_user_info(remote, resp)

    _id = user_info['id']
    _email = user_info['email']
    _username = user_info['username']
    _full_name = user_info['name']

    with db.session.begin_nested():
        token.remote_account.extra_data = {'login': _username, 'id': _id}

        # Create user <-> external id link.
        oauth_link_external_id(
            token.remote_account.user, dict(
                id=str(_id),
                method='gitlab')
        )

@require_more_than_one_external_account
def gitlab_disconnect_handler(remote, *args, **kwargs):
    if not current_user.is_authenticated:
        return current_app.login_manager.unauthorized()

    remote_account = RemoteAccount.get(user_id=current_user.get_id(),
                                       client_id=remote.consumer_key)
    external_method = 'gitlab'
    external_ids = [i.id for i in current_user.external_identifiers
                    if i.method == external_method]

    if external_ids:
        oauth_unlink_external_id(dict(id=external_ids[0],
                                      method=external_method))
    if remote_account:
        with db.session.begin_nested():
            remote_account.delete()


_gitlab = GitlabOAuthSettingsHelper(server_url='https://git.europlanet-gmap.eu')

OAUTHCLIENT_REMOTE_APPS = dict(
    gitlab=_gitlab.remote_app,
)

GITLAB_APP_CREDENTIALS = dict(
    consumer_secret = os.environ['CONSUMER_SECRET'],
    consumer_key = os.environ['CONSUMER_KEY'],
)

